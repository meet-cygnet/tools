apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: logging
  labels:
    k8s-app: fluent-bit
data:
  fluent-bit.conf: |
    [SERVICE]
        Flush        1
        Daemon       Off
        Log_Level    info
        Parsers_File parsers.conf
        LuaScripts   filter.lua

    # App logs from /app/logs/<app>.log
    [INPUT]
        Name              tail
        Path              /app/logs/*.log
        Parser            json
        Path_Key          filepath
        Tag               app.*
        Refresh_Interval  5
        Read_from_Head    On
        DB                /fluent-bit/storage/tail-db-app.db
        Buffer_Max_Size   10mb
        Skip_Long_Lines   On

    # Kubernetes container logs
    [INPUT]
        Name              tail
        Path              /var/log/containers/*.log
        Parser            json
        Tag               kube.*
        Refresh_Interval  5
        Skip_Long_Lines   On

    # Extract app name from file path
    [FILTER]
        Name    lua
        Match   app.*
        script  filter.lua
        call    extract_appname

    # Drop noisy logs (your logic)
    [FILTER]
        Name    lua
        Match   *
        script  filter.lua
        call    filter

    [FILTER]
        Name              kubernetes
        Match             kube.*
        Kube_URL          https://kubernetes.default.svc:443
        Kube_CA_File      /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File   /var/run/secrets/kubernetes.io/serviceaccount/token
        Kube_Tag_Prefix   kube.var.log.containers.
        Merge_Log         On

    [OUTPUT]
        Name              pgsql
        Match             *
        Host              host.docker.internal
        Port              5432
        User              logdatabase
        Password          <>
        Database          logdatabase
        Table             logs
        Connection_Options -c statement_timeout=0
        Timestamp_Key     ts
        Retry_Limit       10

  parsers.conf: |
    [PARSER]
        Name        json
        Format      json
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L
        Time_Keep   On

  filter.lua: |
    function extract_appname(tag, timestamp, record)
      local filepath = record["filepath"]
      if filepath ~= nil then
          local app_name = string.match(filepath, "/app/logs/([%w%-_]+)%.log")
          if app_name ~= nil then
              record["app_name"] = app_name
          end
      end
      return 1, timestamp, record
    end

    function filter(tag, timestamp, record)
      local patterns = {
          "initialized",
          "Connecting to",
          "Service Principal",
          "connected",
          "registered",
          "reconnection",
          "Entra ID",
          "Server listening on port"
      }
      local message = record.message or record.log or ""
      for _, pattern in ipairs(patterns) do
          if string.find(message, pattern) then
              return -1, 0, 0  -- Drop the record
          end
      end
      return 1, timestamp, record  -- Keep the record
    end
